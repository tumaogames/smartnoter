"use strict";(self.webpackChunkluna=self.webpackChunkluna||[]).push([[12],{63:(e,t,i)=>{var a=i(34),s=i(12),n=i(2),r=(i(32),i(42)),d=i(0),o=i(15),h=i(16),l=i(49),p=i(48),g=i(26);const u=256,c=new Float32Array(u),S=new Float32Array(u),L=new Float32Array(u),w=new Float32Array(u),_=new Float32Array(u),m=new Float32Array(4),y=new Float32Array([4,0,0,0]),I=new Float32Array([0,0,0,0]),T=new Float32Array([0,0,0,0]),R=new Float32Array([0,0,0,0]),A=new Float32Array(16),D=new Float32Array([0,0,0,0]),E=new d.l(0,0),v=new pc.Vec4,f=new pc.Vec4(-1,1,-1,-1),P=new d.i,C={emptyFloat32Array:new Float32Array(16),emptyVec4:new d.n(0,0,0,0),emptyShadowMap:null},U=[],M=[],V=[],x=[],O=new s.a,b=new s.a;let F=null;function H(e){return"hlslcc_mtx4x4"+e+"[0]"}class G extends a.a{constructor(e,t,i){super(e,t,i),this.urpAsset=UnityEngine.Rendering.GraphicsSettings.renderPipelineAsset,this.additionalLightsRenderingMode=this.urpAsset.AdditionalLightsRenderingMode;const a=this.device.scope;this.unityUrpIds={mainLightColor:a.resolve("_MainLightColor"),mainLightPosition:a.resolve("_MainLightPosition"),lightDirection:a.resolve("_LightDirection"),unityLightData:a.resolve("unity_LightData"),lightIndices:a.resolve("unity_LightIndices[0]"),additionalLightsCount:a.resolve("_AdditionalLightsCount"),occlusionProbes:a.resolve("unity_ProbesOcclusion"),glossyEnvironmentColor:a.resolve("_GlossyEnvironmentColor"),additionalLightsPosition:a.resolve("_AdditionalLightsPosition[0]"),additionalLightsColor:a.resolve("_AdditionalLightsColor[0]"),additionalLightsAttenuation:a.resolve("_AdditionalLightsAttenuation[0]"),additionalLightsSpotDir:a.resolve("_AdditionalLightsSpotDir[0]"),additionalLightsOcclusionProbe:a.resolve("_AdditionalLightsOcclusionProbes[0]"),cameraOpaqueTexture:a.resolve("_CameraOpaqueTexture"),scaledScreenParamsId:a.resolve("_ScaledScreenParams"),invCameraViewProj:a.resolve(H("_InvCameraViewProj")),lightShadowBias:a.resolve("_ShadowBias"),globalMipBias:a.resolve("_GlobalMipBias"),mainLightShadowmapTexture:a.resolve("_MainLightShadowmapTexture"),mainLightShadowmapTextureHLSL:a.resolve("hlslcc_zcmp_MainLightShadowmapTexture"),mainLightWorldToShadow:a.resolve(H("_MainLightWorldToShadow")),mainLightShadowParams:a.resolve("_MainLightShadowParams"),cascadeShadowSplitSpheres0:a.resolve("_CascadeShadowSplitSpheres0"),cascadeShadowSplitSpheres1:a.resolve("_CascadeShadowSplitSpheres1"),cascadeShadowSplitSpheres2:a.resolve("_CascadeShadowSplitSpheres2"),cascadeShadowSplitSpheres3:a.resolve("_CascadeShadowSplitSpheres3"),cascadeShadowSplitSphereRadii:a.resolve("_CascadeShadowSplitSphereRadii"),mainLightShadowOffset0:a.resolve("_MainLightShadowOffset0"),mainLightShadowOffset1:a.resolve("_MainLightShadowOffset1"),mainLightShadowmapSize:a.resolve("_MainLightShadowmapSize")}}initShadowParams(){const e=this.device,t=new p.a(h.c.instance);this.device.webgl2&&(this.shadowRenderer=new l.a(e,this,t,this.renderTargetPool)),this.shadowRenderingResult=null}setCamera(e,t,i=!1){P.copy(e.invViewProjMat),this.unityUrpIds.invCameraViewProj.setValue(P.data),super.setCamera(e,t,i);const a=Math.min(-Math.log2(this.device.vw/this.device.sw),0);E.set(a,Math.pow(2,a)),this.unityUrpIds.globalMipBias.setValue(E.data)}processClear(e){if(e.additionalCameraData.renderType===n.d.URP_CAMERA_RENDER_TYPE_BASE)this.device.clear(e.camera._clearOptions);else if(e.additionalCameraData.renderType===n.d.URP_CAMERA_RENDER_TYPE_OVERLAY&&e.additionalCameraData.clearDepth){const e={depth:1,flags:n.d.CLEARFLAG_DEPTH};this.device.clear(e)}}renderCameras(e){for(let t=0;t<e.length;t++){const i=e[t];this.renderCamera(i);const a=i.additionalCameraData;if(a&&a.cameraStack)for(const e of a.cameraStack._items)e&&this.renderCamera(e.handle)}}getCameras(){return this.scene._urpBaseCameras}renderMeshInstance(e,t,i,a,r){const d=this.device,o=a.material,h=(a._shaderDefs&n.d.SHADERDEF_LM)>0;if(!o||0===a.mesh.primitive.length||0===a.mesh.primitive[0].count)return;this.getPassesFromMaterial(o);const l=U.length>0,p=x.length>0,g=V.length>0;if(!l&&!p&&!g)return;h&&a.configureLightmap(),this.updateScissor();const u=a.morphInstance&&a.morphInstance._vertexBuffer||a.mesh.vertexBuffer;if(this.device.setVertexBuffer(u,0),this.device.setIndexBuffer(a.mesh.indexBuffer[0]),this.app.counters.recordDrawCall(),a.mesh.meshInstance){const e=a.mesh.meshInstance.instancingData;this.app.counters.recordVertices(e&&e.count>0?u.numVertices*e.count:u.numVertices)}else this.app.counters.recordVertices(u.numVertices);if(this.setSkinning(this.device,a),this.setMaterial(this.device,a.material),this.pushUniforms(this.device,a.parameters),this.setDrawCall(this.device,a),d.setDepthRange((a._shaderDefs&n.d.SHADERDEF_RENDERTYPE_BACKGROUND)>0?1:0,1),e.merge(o.keywords),e.merge(O),h&&e.enableKeywordId(s.b.LIGHTMAP_ON),(a._shaderDefs&n.d.SHADERDEF_DIRLM)>0&&e.enableKeywordId(s.b.DIRLIGHTMAP_COMBINED),!g||l||p||this.renderMeshInstancePasses(V,e,a),!l&&!p)return this.popUniforms(this.device,a.parameters),void this.setDrawCall(this.device,null);l&&(M[0]=U[0],this.drawUrpForwardLitPass(M,a,r,e,h,t,i)),p&&this.renderMeshInstancePasses(x,e,a),this.restoreScissorTest(),this.popUniforms(d,a.parameters),this.setDrawCall(d,null)}setupGlobalKeywordsForCamera(e,t){O.clear();let i=!1,a=!1;for(let e=0;e<t.length;e++){if(t[e]._type===n.d.LIGHTTYPE_POINT||t[e]._type===n.d.LIGHTTYPE_DIRECTIONAL&&i){a=!0;break}t[e]._type===n.d.LIGHTTYPE_DIRECTIONAL&&(i=!0)}this.additionalLightsRenderingMode!==UnityEngine.Rendering.Universal.LightRenderingMode.Disabled&&a&&(this.additionalLightsRenderingMode===UnityEngine.Rendering.Universal.LightRenderingMode.PerPixel?O.enableKeywordId(s.b._ADDITIONAL_LIGHTS):this.additionalLightsRenderingMode===UnityEngine.Rendering.Universal.LightRenderingMode.PerVertex&&O.enableKeywordId(s.b._ADDITIONAL_LIGHTS_VERTEX)),this.setupShadowKeywords(t)}setupShadowKeywords(e){const t=null!==this.shadowRenderer?(0,g.i)(e):null;if(t&&this.urpAsset.SupportsMainLightShadows&&0!==this.urpAsset.ShadowCascadeCount&&t.castShadows&&0!==this.shadowRenderer.settings.getShadowsModeForLight(t)&&(1===this.urpAsset.ShadowCascadeCount?O.enableKeywordId(s.b._MAIN_LIGHT_SHADOWS):O.enableKeywordId(s.b._MAIN_LIGHT_SHADOWS_CASCADE),this.urpAsset.SupportsSoftShadows&&t.shadows===n.d.SHADOWS_MODE_SOFT_SHADOWS)){(t.additionalLightData&&t.additionalLightData.softShadowQuality===n.d.SOFT_SHADOW_QUALITY_USE_PIPELINE_SETTINGS?this.urpAsset.SoftShadowQualityValue:t.additionalLightData.softShadowQuality)&&O.enableKeywordId(s.b._SHADOWS_SOFT)}}drawUrpForwardLitPass(e,t,i,a,d,o,h){r.a.getLightsData(t,i,this.lightData,this.additionalLightsRenderingMode===UnityEngine.Rendering.Universal.LightRenderingMode.PerVertex),b.copy(a);const l=this.setupLightProbe(d,o);this.setupGlossyEnvColor(),this.dispatchLightProbe(l,b,d),this.dispatchMainLightUrp(this.lightData.mainLight),this.dispatchLights(this.lightData,d),t._material._shader.isCreatedByShaderGraph&&!i.find((e=>e._type===n.d.LIGHTTYPE_POINT))&&i.filter((e=>e._type===n.d.LIGHTTYPE_DIRECTIONAL)).length<=1&&b.enableKeywordId(s.b._ADDITIONAL_LIGHTS_VERTEX),this.renderMeshInstancePasses(e,b,t)}dispatchLights(e,t){const i=e.vertexLights.length>0?e.vertexLights.length:e.pixelLights.length;!t||e.mainLight&&!e.mainLight.affectLightmapped?(I[1]=0===i&&e.mainLight?1:i,I[2]=e.mainLight?1:0):(I[1]=0===i&&e.mainLight&&0===UnityEngine.RenderSettings.mixedBakeMode?1:i,I[2]=e.mainLight&&0===UnityEngine.RenderSettings.mixedBakeMode?1:0),this.unityUrpIds.unityLightData.setValue(I),this.unityUrpIds.occlusionProbes.setValue([1,1,1,1]),this.dispatchAdditionalLights(e)}dispatchMainLightUrp(e){null===e?(T[0]=0,T[1]=0,T[2]=0,T[3]=1,R[0]=0,R[1]=0,R[2]=-1,R[3]=0,A.set(pc.Mat4.IDENTITY.data)):(T.set(e._finalColor),R[0]=e._directionToLight.x,R[1]=e._directionToLight.y,R[2]=e._directionToLight.z,R[3]=0,A.set(e._worldToLightMatrix.data)),this.unityUrpIds.mainLightColor.setValue(T),this.unityUrpIds.mainLightPosition.setValue(R),this.unityUrpIds.lightDirection.setValue(R),this.lightIds.matrix.setValue(A)}dispatchAdditionalLights(e){const t=this.additionalLightsRenderingMode===UnityEngine.Rendering.Universal.LightRenderingMode.PerPixel?e.pixelLights:e.vertexLights,i=Math.min(t.length,UnityEngine.RenderSettings._pixelLightCount);for(let e=0;e<i;e++){const i=t[e];this.dispatchAdditionalLight(i,e)}this.unityUrpIds.additionalLightsPosition.setValue(c),this.unityUrpIds.additionalLightsColor.setValue(S),this.unityUrpIds.additionalLightsAttenuation.setValue(L),this.unityUrpIds.additionalLightsSpotDir.setValue(w),this.unityUrpIds.additionalLightsOcclusionProbe.setValue(_),y[0]=i,this.unityUrpIds.additionalLightsCount.setValue(y);for(let e=0;e<4;e++)m[e]=e;this.unityUrpIds.lightIndices.setValue(m)}dispatchAdditionalLight(e,t){const i=4*t,a=e._type===n.d.LIGHTTYPE_DIRECTIONAL?e._directionToLight:e._position;if(c[i+0]=a.x,c[i+1]=a.y,c[i+2]=a.z,c[i+3]=e._type===n.d.LIGHTTYPE_DIRECTIONAL?0:1,S[i+0]=e._finalColor[0],S[i+1]=e._finalColor[1],S[i+2]=e._finalColor[2],S[i+3]=e._finalColor[3],e._type===n.d.LIGHTTYPE_DIRECTIONAL)v.set(0,1,0,1);else{const t=e.range*e._attenuationEnd,i=-t/(.8*.8*t-t);v.set(1/Math.max(1e-4,e._attenuationEnd*e._attenuationEnd),i,0,1)}L[i+0]=v.x,L[i+1]=v.y,L[i+2]=v.z,L[i+3]=v.w,w[i+0]=0,w[i+1]=0,w[i+2]=1,w[i+3]=0;const s=f;s.x=0,s.y=1,_[i+0]=s.x,_[i+1]=s.y,_[i+2]=s.z,_[i+3]=s.w}setupGlossyEnvColor(){const e=UnityEngine.RenderSettings.ambientProbe,t=UnityEngine.RenderSettings._reflectionIntensity;D[0]=UnityEngine.Mathf.LinearToGammaSpace(e.data[0]*t),D[1]=UnityEngine.Mathf.LinearToGammaSpace(e.data[9]*t),D[2]=UnityEngine.Mathf.LinearToGammaSpace(e.data[18]*t),D[3]=t,this.unityUrpIds.glossyEnvironmentColor.setValue(D)}getPassesFromMaterial(e){e.getPass(n.d.SHADER_PASS_UNIVERSAL_FORWARD_LIT,U),e.getPass(n.d.SHADER_PASS_SRP_DEFAULT_UNLIT,x),e.getPass(n.d.SHADER_PASS_ALWAYS,V)}dispatchLightProbe(e,t,i){e.updateUniforms();for(let t=0;t<this.unityIds.lightProbeIds.length;t++)this.unityIds.lightProbeIds[t].setValue(e.uniforms[t]._data)}needToRenderDepth(){return this.urpAsset.RequireDepthTexture&&this.scene.hasVisibleDepthConsumers()}onOpaqueRendered(e){super.onOpaqueRendered(e),this.urpAsset.RequireOpaqueTexture&&this.drawCameraOpaqueTexture(e)}drawCameraOpaqueTexture(e){const t=this.device,i=e?e._screenParams:[this.device.width,this.device.height];null===F&&(F=this.createTexture(i[0],i[1]),F.name="_CameraOpaqueTexture"),t.setTexture(F,0),t.activeTexture(0),t.gl.copyTexSubImage2D(t.gl.TEXTURE_2D,0,0,0,0,0,F._width,F._height),this.unityUrpIds.cameraOpaqueTexture.setValue(F)}needToDrawSkybox(e,t){return e&&t.clearSkybox&&t._component.additionalCameraData.renderType===n.d.URP_CAMERA_RENDER_TYPE_BASE}renderShadowMap(e,t,i,a){this.device.webgl2&&this.urpAsset.SupportsMainLightShadows&&this.shadowRenderer.isShadowsEnabled(a)?(o.a.instance.startSubSection(o.a.RENDER_SHADOWS),this.shadowRenderingResult=this.shadowRenderer.render(e.camera,t,a),o.a.instance.endSubSection(o.a.RENDER_SHADOWS)):this.setDefaultUniformsForShadows()}freeShadowMap(){this.shadowRenderingResult&&(this.shadowRenderingResult.renderTarget&&this.renderTargetPool.releaseTempRenderTarget(this.shadowRenderingResult.renderTarget),this.shadowRenderingResult=null)}setDefaultUniformsForShadows(){!C.emptyShadowMap&&this.shadowRenderer&&(C.emptyShadowMap=this.shadowRenderer.getDefaultShadowMap()),this.unityUrpIds.mainLightShadowmapTexture.setValue(UnityEngine.Texture2D.whiteTexture.handle),this.unityUrpIds.mainLightShadowmapTextureHLSL.setValue(C.emptyShadowMap),this.unityUrpIds.mainLightWorldToShadow.setValue(C.emptyFloat32Array);const e=C.emptyVec4.data;this.unityUrpIds.mainLightShadowParams.setValue(e),this.unityUrpIds.cascadeShadowSplitSpheres0.setValue(e),this.unityUrpIds.cascadeShadowSplitSpheres1.setValue(e),this.unityUrpIds.cascadeShadowSplitSpheres2.setValue(e),this.unityUrpIds.cascadeShadowSplitSpheres3.setValue(e),this.unityUrpIds.cascadeShadowSplitSphereRadii.setValue(e),this.unityUrpIds.mainLightShadowOffset0.setValue(e),this.unityUrpIds.mainLightShadowOffset1.setValue(e),this.unityUrpIds.mainLightShadowmapSize.setValue(e)}}pc.ForwardRendererUrp=G}},e=>{e.O(0,[1],(()=>{return t=63,e(e.s=t);var t}));e.O()}]);